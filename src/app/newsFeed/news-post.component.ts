import { Component, Input } from '@angular/core';

import { NewsFeedService } from './news-feed.service';
import { Post } from './post';

@Component({
    selector: 'app-news-post',
    templateUrl: './news-post.component.html',
    styleUrls: ['./news-post.component.css']
})
export class NewsPostComponent {
    @Input() title: string;
    @Input() body: string;

    timestampString: string;
    @Input()
    set publishDate(ts: number) {
        this.timestampString = this.formatDateString(ts);
    }
    // the timestamp is the publishDate from the Post object
    // the createDate is stored in the databse
    // but that is never retrieved or displayed to the user
    // the input is a setter that will convert ms => date string

    @Input() id: number;
    // id is the PK in the DB
    // This is not always assigned to the component
    // because the PK is generated by the DB
    // When creating a post, the componenet is made
    // before sending it to a DB
    // This is only needed when editing an existing post

    @Input() displayFull: boolean;
    // a post can be viewed in its full entirety
    // if displayFull=true (default) all info will be shown
    // used for news feed etc
    // if displayFull=false then limited information is shown
    // used for a compact view, in admin when choosing a post to edit

    @Input()
    set postObject(post: Post) {
        this.valuesFromPostObject(post);
    }
    // an entire Post object can be passed in
    // this is the same as passing each of the other inputs seperately
    // the Post will be parsed and assigned to the above params

    constructor(private nfs: NewsFeedService) {
        // init starting values
        // so a Post object can be parsed and values assigned
        this.title = '';
        this.body = '';
        this.timestampString = '';
        this.id = -1;
        this.displayFull = true;
    }

    private formatDateString(timestamp: number): string {
        // receives a ms time stamp
        // returns a string in a readable format for display
        return new Date(timestamp).toLocaleString([], {
            year: '2-digit',
            month: 'numeric',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
    }

    private valuesFromPostObject(post: Post): void {
        // parse through the passed in Post object
        // and assign all of the standard input values
        for (const key in post) {
            if (this.hasOwnProperty(key)) {
                // property that can be assigned directly
                this[key] = post[key];
            } else {
                // since typescipt SHOULD only allow a Post object
                // all of the keys should match this component
                // except for any setters (ex publishDate)
                // becyase the setters will be on the proto
                // which this.hasOwnProperty excludes
                //
                // this Post object is coming as an Input from HTML
                // which typescript doesn't protect from
                // use try...catch just in case this isn't a Post
                //
                // TODO: Find a better way to handle all of this...
                try {
                    this[key] = post[key];
                } catch (error) {}
            }
        }
    }
}
